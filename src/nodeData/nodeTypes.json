[
  {
    "id": "python-hello-world",
    "type": "PythonScript",
    "label": "Hello World",
    "code": "#!/usr/bin/env python3\n\ndef main():\n    print('Hello, World!')\n\nif __name__ == '__main__':\n    main()",
    "description": "A simple Python script that prints 'Hello, World!' to the console.",
    "agentPrompt": "As a beginner Python developer, review this 'Hello World' script. Ensure it follows best practices for readability and simplicity. Suggest any minor improvements if necessary.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.7,
      "maxTokens": 1000,
      "topP": 1.0
    }
  },
  {
    "id": "python-snake-game",
    "type": "PythonScript",
    "label": "Snake Game",
    "code": "#!/usr/bin/env python3\nimport pygame\nimport time\nimport random\n\n# Initialize pygame\npygame.init()\n\n# Set up display\nwidth, height = 600, 400\nwindow = pygame.display.set_mode((width, height))\npygame.display.set_caption('Snake Game')\n\n# Define colors\nblack = (0, 0, 0)\nwhite = (255, 255, 255)\nred = (255, 0, 0)\ngreen = (0, 255, 0)\n\n# Snake settings\nsnake_size = 10\nsnake_speed = 15\nclock = pygame.time.Clock()\n\nfont_style = pygame.font.SysFont(None, 35)\n\ndef our_snake(snake_size, snake_list):\n    for x in snake_list:\n        pygame.draw.rect(window, green, [x[0], x[1], snake_size, snake_size])\n\ndef message(msg, color):\n    mesg = font_style.render(msg, True, color)\n    window.blit(mesg, [width / 6, height / 3])\n\ndef gameLoop():\n    game_over = False\n    game_close = False\n\n    x1 = width / 2\n    y1 = height / 2\n\n    x1_change = 0\n    y1_change = 0\n\n    snake_List = []\n    Length_of_snake = 1\n\n    foodx = round(random.randrange(0, width - snake_size) / 10.0) * 10.0\n    foody = round(random.randrange(0, height - snake_size) / 10.0) * 10.0\n\n    while not game_over:\n\n        while game_close == True:\n            window.fill(black)\n            message('You Lost! Press Q-Quit or C-Play Again', red)\n            pygame.display.update()\n\n            for event in pygame.event.get():\n                if event.type == pygame.KEYDOWN:\n                    if event.key == pygame.K_q:\n                        game_over = True\n                        game_close = False\n                    if event.key == pygame.K_c:\n                        gameLoop()\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                game_over = True\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_LEFT:\n                    x1_change = -snake_size\n                    y1_change = 0\n                elif event.key == pygame.K_RIGHT:\n                    x1_change = snake_size\n                    y1_change = 0\n                elif event.key == pygame.K_UP:\n                    y1_change = -snake_size\n                    x1_change = 0\n                elif event.key == pygame.K_DOWN:\n                    y1_change = snake_size\n                    x1_change = 0\n\n        if x1 >= width or x1 < 0 or y1 >= height or y1 < 0:\n            game_close = True\n        x1 += x1_change\n        y1 += y1_change\n        window.fill(black)\n        pygame.draw.rect(window, red, [foodx, foody, snake_size, snake_size])\n        snake_Head = []\n        snake_Head.append(x1)\n        snake_Head.append(y1)\n        snake_List.append(snake_Head)\n        if len(snake_List) > Length_of_snake:\n            del snake_List[0]\n\n        for x in snake_List[:-1]:\n            if x == snake_Head:\n                game_close = True\n\n        our_snake(snake_size, snake_List)\n        pygame.display.update()\n\n        if x1 == foodx and y1 == foody:\n            foodx = round(random.randrange(0, width - snake_size) / 10.0) * 10.0\n            foody = round(random.randrange(0, height - snake_size) / 10.0) * 10.0\n            Length_of_snake += 1\n\n        clock.tick(snake_speed)\n\n    pygame.quit()\n    quit()\n\nif __name__ == '__main__':\n    gameLoop()",
    "description": "A classic Snake game implemented in Python using the Pygame library.",
    "agentPrompt": "As a Python game developer, review this Snake game implementation. Check for code readability, proper use of Pygame functionalities, and game logic correctness. Suggest improvements for enhancing gameplay, such as increasing difficulty levels or adding a scoring system.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.8,
      "maxTokens": 1500,
      "topP": 1.0
    }
  },
  {
    "id": "python-tetris",
    "type": "PythonScript",
    "label": "Tetris",
    "code": "#!/usr/bin/env python3\nimport pygame\nimport random\n\n# Initialize pygame\npygame.init()\n\n# Screen dimensions\nSCREEN_WIDTH = 300\nSCREEN_HEIGHT = 600\nBLOCK_SIZE = 30\n\n# Define colors\nBLACK = (0, 0, 0)\nWHITE = (255, 255, 255)\nGRAY = (128, 128, 128)\nRED = (255, 0, 0)\nGREEN = (0, 255, 0)\nBLUE = (0, 0, 255)\nCYAN = (0, 255, 255)\nMAGENTA = (255, 0, 255)\nYELLOW = (255, 255, 0)\n\n# Define shapes\nSHAPES = [\n    [[1, 1, 1, 1]],  # I\n    [[1, 1, 1], [0, 1, 0]],  # T\n    [[1, 1, 0], [0, 1, 1]],  # S\n    [[0, 1, 1], [1, 1, 0]],  # Z\n    [[1, 1], [1, 1]]  # O\n]\n\nSHAPE_COLORS = [CYAN, MAGENTA, GREEN, RED, YELLOW]\n\nclass Tetromino:\n    def __init__(self, shape, color):\n        self.shape = shape\n        self.color = color\n        self.rotation = 0\n        self.x = SCREEN_WIDTH // 2 // BLOCK_SIZE\n        self.y = 0\n\n    def rotate(self):\n        self.shape = [list(row) for row in zip(*self.shape[::-1])]\n\ndef create_grid(locked_positions={}):\n    grid = [[BLACK for _ in range(SCREEN_WIDTH // BLOCK_SIZE)] for _ in range(SCREEN_HEIGHT // BLOCK_SIZE)]\n    for (x, y), color in locked_positions.items():\n        if y < SCREEN_HEIGHT // BLOCK_SIZE and x < SCREEN_WIDTH // BLOCK_SIZE:\n            grid[y][x] = color\n    return grid\n\ndef draw_grid(surface, grid):\n    for y in range(len(grid)):\n        for x in range(len(grid[y])):\n            pygame.draw.rect(surface, grid[y][x], (x*BLOCK_SIZE, y*BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE), 0)\n    # Draw grid lines\n    for y in range(len(grid)):\n        pygame.draw.line(surface, GRAY, (0, y*BLOCK_SIZE), (SCREEN_WIDTH, y*BLOCK_SIZE))\n    for x in range(len(grid[0])):\n        pygame.draw.line(surface, GRAY, (x*BLOCK_SIZE, 0), (x*BLOCK_SIZE, SCREEN_HEIGHT))\n\ndef get_new_tetromino():\n    shape = random.choice(SHAPES)\n    color = random.choice(SHAPE_COLORS)\n    return Tetromino(shape, color)\n\ndef main():\n    screen = pygame.display.set_mode((SCREEN_WIDTH, SCREEN_HEIGHT))\n    pygame.display.set_caption('Tetris')\n    clock = pygame.time.Clock()\n    grid = create_grid()\n    locked_positions = {}\n    current_piece = get_new_tetromino()\n    run = True\n    fall_time = 0\n    fall_speed = 0.27\n\n    while run:\n        grid = create_grid(locked_positions)\n        fall_time += clock.get_rawtime()\n        clock.tick()\n\n        if fall_time / 1000 >= fall_speed:\n            fall_time = 0\n            current_piece.y += 1\n            if not(valid_space(current_piece, grid)) and current_piece.y > 0:\n                current_piece.y -= 1\n                add_to_locked_positions(current_piece, locked_positions)\n                current_piece = get_new_tetromino()\n                if not(valid_space(current_piece, grid)):\n                    run = False\n\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                run = False\n                pygame.display.quit()\n                quit()\n            if event.type == pygame.KEYDOWN:\n                if event.key == pygame.K_LEFT:\n                    current_piece.x -= 1\n                    if not(valid_space(current_piece, grid)):\n                        current_piece.x += 1\n                elif event.key == pygame.K_RIGHT:\n                    current_piece.x += 1\n                    if not(valid_space(current_piece, grid)):\n                        current_piece.x -= 1\n                elif event.key == pygame.K_DOWN:\n                    current_piece.y += 1\n                    if not(valid_space(current_piece, grid)):\n                        current_piece.y -= 1\n                elif event.key == pygame.K_UP:\n                    current_piece.rotate()\n                    if not(valid_space(current_piece, grid)):\n                        current_piece.rotate()\n                        current_piece.rotate()\n                        current_piece.rotate()\n\n        shape_pos = convert_shape_format(current_piece)\n\n        for pos in shape_pos:\n            x, y = pos\n            if y > -1:\n                grid[y][x] = current_piece.color\n\n        draw_grid(screen, grid)\n        pygame.display.update()\n\n    pygame.quit()\n\ndef valid_space(piece, grid):\n    accepted_positions = [[(x, y) for x in range(SCREEN_WIDTH // BLOCK_SIZE) if grid[y][x] == BLACK] for y in range(SCREEN_HEIGHT // BLOCK_SIZE)]\n    accepted_positions = [x for sub in accepted_positions for x in sub]\n    formatted = convert_shape_format(piece)\n\n    for pos in formatted:\n        if pos not in accepted_positions:\n            if pos[1] > -1:\n                return False\n    return True\n\ndef convert_shape_format(piece):\n    positions = []\n    format = piece.shape\n\n    for i, line in enumerate(format):\n        row = list(line)\n        for j, column in enumerate(row):\n            if column == 1:\n                positions.append((piece.x + j, piece.y + i))\n\n    return positions\n\ndef add_to_locked_positions(piece, locked):\n    formatted = convert_shape_format(piece)\n    for pos in formatted:\n        p = (pos[0], pos[1])\n        locked[p] = piece.color\n\nif __name__ == '__main__':\n    main()",
    "description": "A basic implementation of the classic Tetris game using Python and Pygame.",
    "agentPrompt": "As a Python game developer, review this Tetris game implementation. Ensure that the game logic, such as piece rotation and collision detection, functions correctly. Suggest enhancements for improving gameplay, such as adding a scoring system, increasing difficulty levels, or implementing a next-piece preview feature.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.8,
      "maxTokens": 1500,
      "topP": 1.0
    }
  },
  {
    "id": "python-madlibs",
    "type": "PythonScript",
    "label": "Mad Libs Game",
    "code": "#!/usr/bin/env python3\n\ndef mad_libs():\n    print('Welcome to Mad Libs!')\n    noun = input('Enter a noun: ')\n    verb = input('Enter a verb: ')\n    adjective = input('Enter an adjective: ')\n    adverb = input('Enter an adverb: ')\n    \n    story = f'The {adjective} {noun} decided to {verb} {adverb}.'\n    print('\\nHere is your story:')\n    print(story)\n\nif __name__ == '__main__':\n    mad_libs()",
    "description": "A simple Mad Libs game where users input words to create a fun story.",
    "agentPrompt": "As a beginner Python educator, review this Mad Libs game script. Ensure that user inputs are correctly captured and integrated into the story. Suggest ways to enhance the game, such as adding more prompts, validating user inputs, or allowing multiple story templates.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.7,
      "maxTokens": 1000,
      "topP": 1.0
    }
  },
  {
    "id": "python-calculator",
    "type": "PythonScript",
    "label": "Simple Calculator",
    "code": "#!/usr/bin/env python3\n\ndef add(x, y):\n    return x + y\n\ndef subtract(x, y):\n    return x - y\n\ndef multiply(x, y):\n    return x * y\n\ndef divide(x, y):\n    if y == 0:\n        return 'Error! Division by zero.'\n    return x / y\n\ndef calculator():\n    print('Simple Calculator')\n    print('Select operation:')\n    print('1. Add')\n    print('2. Subtract')\n    print('3. Multiply')\n    print('4. Divide')\n\n    choice = input('Enter choice (1/2/3/4): ')\n\n    if choice in ['1', '2', '3', '4']:\n        try:\n            num1 = float(input('Enter first number: '))\n            num2 = float(input('Enter second number: '))\n        except ValueError:\n            print('Invalid input. Please enter numbers only.')\n            return\n\n        if choice == '1':\n            print(f'Result: {add(num1, num2)}')\n        elif choice == '2':\n            print(f'Result: {subtract(num1, num2)}')\n        elif choice == '3':\n            print(f'Result: {multiply(num1, num2)}')\n        elif choice == '4':\n            print(f'Result: {divide(num1, num2)}')\n    else:\n        print('Invalid choice.')\n\nif __name__ == '__main__':\n    calculator()",
    "description": "A simple command-line calculator that performs basic arithmetic operations.",
    "agentPrompt": "As a Python programming instructor, review this simple calculator script. Ensure that all arithmetic functions work correctly and that user inputs are properly handled. Suggest improvements such as adding more operations, enhancing input validation, or implementing a user-friendly menu system.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.7,
      "maxTokens": 1000,
      "topP": 1.0
    }
  },
  {
    "id": "python-number-guess",
    "type": "PythonScript",
    "label": "Number Guessing Game",
    "code": "#!/usr/bin/env python3\nimport random\n\ndef number_guessing_game():\n    number = random.randint(1, 100)\n    attempts = 0\n    print('Welcome to the Number Guessing Game!')\n    print('I have selected a number between 1 and 100.')\n\n    while True:\n        try:\n            guess = int(input('Enter your guess: '))\n            attempts += 1\n            if guess < number:\n                print('Too low! Try again.')\n            elif guess > number:\n                print('Too high! Try again.')\n            else:\n                print(f'Congratulations! You guessed the number in {attempts} attempts.')\n                break\n        except ValueError:\n            print('Invalid input. Please enter an integer.')\n\nif __name__ == '__main__':\n    number_guessing_game()",
    "description": "A simple number guessing game where the user tries to guess a randomly selected number.",
    "agentPrompt": "As a beginner Python developer, review this number guessing game script. Ensure that the random number generation and guess evaluation work correctly. Suggest enhancements such as adding difficulty levels, limiting the number of attempts, or providing hints to the player.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.7,
      "maxTokens": 1000,
      "topP": 1.0
    }
  },
  {
    "id": "python-pong-game",
    "type": "PythonScript",
    "label": "Pong Game",
    "code": "#!/usr/bin/env python3\nimport pygame\n\n# Initialize pygame\npygame.init()\n\n# Screen dimensions\nWIDTH, HEIGHT = 800, 600\nscreen = pygame.display.set_mode((WIDTH, HEIGHT))\npygame.display.set_caption('Pong')\n\n# Colors\nWHITE = (255, 255, 255)\nBLACK = (0, 0, 0)\n\n# Paddle settings\nPADDLE_WIDTH, PADDLE_HEIGHT = 10, 100\npaddle_speed = 7\n\n# Ball settings\nBALL_SIZE = 10\nball_speed_x = 5\nball_speed_y = 5\n\n# Fonts\nfont = pygame.font.SysFont(None, 50)\n\n# Paddle positions\nleft_paddle = pygame.Rect(50, HEIGHT//2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)\nright_paddle = pygame.Rect(WIDTH - 50 - PADDLE_WIDTH, HEIGHT//2 - PADDLE_HEIGHT//2, PADDLE_WIDTH, PADDLE_HEIGHT)\n\n# Ball position\nball = pygame.Rect(WIDTH//2 - BALL_SIZE//2, HEIGHT//2 - BALL_SIZE//2, BALL_SIZE, BALL_SIZE)\n\n# Scores\nleft_score = 0\nright_score = 0\n\nclock = pygame.time.Clock()\nFPS = 60\n\ndef draw_objects():\n    screen.fill(BLACK)\n    pygame.draw.rect(screen, WHITE, left_paddle)\n    pygame.draw.rect(screen, WHITE, right_paddle)\n    pygame.draw.ellipse(screen, WHITE, ball)\n    score_text = font.render(f'{left_score} : {right_score}', True, WHITE)\n    screen.blit(score_text, (WIDTH//2 - score_text.get_width()//2, 20))\n    pygame.display.flip()\n\ndef move_ball():\n    global ball_speed_x, ball_speed_y, left_score, right_score\n    ball.x += ball_speed_x\n    ball.y += ball_speed_y\n\n    # Collision with top and bottom\n    if ball.top <= 0 or ball.bottom >= HEIGHT:\n        ball_speed_y *= -1\n\n    # Collision with paddles\n    if ball.colliderect(left_paddle) or ball.colliderect(right_paddle):\n        ball_speed_x *= -1\n\n    # Scoring\n    if ball.left <= 0:\n        right_score += 1\n        reset_ball()\n    if ball.right >= WIDTH:\n        left_score += 1\n        reset_ball()\n\ndef reset_ball():\n    global ball_speed_x, ball_speed_y\n    ball.center = (WIDTH//2, HEIGHT//2)\n    ball_speed_x *= random.choice([-1, 1])\n    ball_speed_y *= random.choice([-1, 1])\n\ndef move_paddles(keys_pressed):\n    if keys_pressed[pygame.K_w] and left_paddle.top > 0:\n        left_paddle.y -= paddle_speed\n    if keys_pressed[pygame.K_s] and left_paddle.bottom < HEIGHT:\n        left_paddle.y += paddle_speed\n    if keys_pressed[pygame.K_UP] and right_paddle.top > 0:\n        right_paddle.y -= paddle_speed\n    if keys_pressed[pygame.K_DOWN] and right_paddle.bottom < HEIGHT:\n        right_paddle.y += paddle_speed\n\ndef main():\n    global ball_speed_x, ball_speed_y\n    run = True\n    while run:\n        clock.tick(FPS)\n        for event in pygame.event.get():\n            if event.type == pygame.QUIT:\n                run = False\n\n        keys_pressed = pygame.key.get_pressed()\n        move_paddles(keys_pressed)\n        move_ball()\n        draw_objects()\n\n    pygame.quit()\n\nif __name__ == '__main__':\n    main()",
    "description": "A basic implementation of the classic Pong game using Python and Pygame.",
    "agentPrompt": "As a Python game developer, review this Pong game script. Ensure that paddle movement, ball physics, and scoring are functioning correctly. Suggest enhancements such as adding sound effects, improving collision detection, implementing AI for single-player mode, or adding a start screen and game over screen.",
    "agentConfig": {
      "model": "gpt-4o-mini",
      "temperature": 0.8,
      "maxTokens": 1500,
      "topP": 1.0
    }
  }
]
