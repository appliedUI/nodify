[
  {
    "type": "template",
    "label": "Define Template",
    "code": "<template>\n  <div class=\"page-container\">\n    <h1>{{ pageTitle }}</h1>\n    <input v-model=\"userInput\" placeholder=\"Enter something\" />\n    <button @click=\"handleSubmit\">Submit</button>\n    <p>{{ outputMessage }}</p>\n  </div>\n</template>",
    "description": "Defines the core HTML structure of a Vue 3 page with dynamic data binding and event handling."
  },
  {
    "type": "script",
    "label": "Setup Script",
    "code": "<script setup>\nimport { ref } from 'vue';\nimport { useMyStore } from '@/stores/myStore';\n\nconst pageTitle = ref('Welcome to Vue 3 Page');\nconst userInput = ref('');\nconst outputMessage = ref('');\n\nconst myStore = useMyStore();\n\nfunction handleSubmit() {\n  outputMessage.value = `Hello, ${userInput.value}!`;\n  myStore.updateData(userInput.value);\n}\n</script>",
    "description": "Defines the script setup block with reactive data, store access, and methods."
  },
  {
    "type": "style",
    "label": "Define Styles",
    "code": "<style scoped>\n.page-container {\n  max-width: 600px;\n  margin: 0 auto;\n  text-align: center;\n}\nbutton {\n  margin-top: 10px;\n  padding: 10px;\n  background-color: #42b883;\n  color: white;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n}\n</style>",
    "description": "Defines scoped styles for the Vue 3 page."
  },
  {
    "type": "store",
    "label": "Pinia Store Access",
    "code": "import { defineStore } from 'pinia';\n\nexport const useMyStore = defineStore('myStore', {\n  state: () => ({\n    data: ''\n  }),\n  actions: {\n    updateData(newData) {\n      this.data = newData;\n    }\n  }\n});",
    "description": "Defines a Pinia store for state management and integration with the Vue 3 page."
  },
  {
    "type": "import",
    "label": "Vue Imports",
    "code": "import { ref } from 'vue';\nimport { useMyStore } from '@/stores/myStore';",
    "description": "Imports required modules and stores for the Vue 3 page."
  },
  {
    "type": "input",
    "label": "User Input",
    "code": "<input v-model=\"userInput\" placeholder=\"Type here\" />",
    "description": "Creates a two-way data binding input field for user input."
  },
  {
    "type": "output",
    "label": "Output Field",
    "code": "<p>{{ outputMessage }}</p>",
    "description": "Displays the dynamic output message generated by Vue logic."
  },
  {
    "type": "event",
    "label": "Button Click Event",
    "code": "<button @click=\"handleSubmit\">Submit</button>",
    "description": "Handles button click events and calls the corresponding method."
  },
  {
    "type": "computed",
    "label": "Computed Property",
    "code": "const uppercaseMessage = computed(() => outputMessage.value.toUpperCase());",
    "description": "Defines a computed property for deriving uppercase text from the output message."
  },
  {
    "type": "watch",
    "label": "Watch User Input",
    "code": "watch(userInput, (newVal, oldVal) => {\n  console.log(`Input changed from ${oldVal} to ${newVal}`);\n});",
    "description": "Adds a watch function to observe changes to `userInput`."
  },
  {
    "type": "prop",
    "label": "Prop Definition",
    "code": "const props = defineProps({\n  title: {\n    type: String,\n    required: true\n  }\n});",
    "description": "Defines a prop for passing data into the Vue 3 component."
  },
  {
    "type": "emit",
    "label": "Emit Event",
    "code": "const emit = defineEmits(['customEvent']);\n\nfunction triggerEvent() {\n  emit('customEvent', userInput.value);\n}",
    "description": "Defines an emit event to communicate data from child to parent components."
  },
  {
    "type": "slot",
    "label": "Slot Usage",
    "code": "<slot name=\"customContent\"></slot>",
    "description": "Defines a slot for injecting custom content into the component."
  },
  {
    "type": "directive",
    "label": "Custom Directive",
    "code": "<div v-my-directive=\"dynamicValue\"></div>",
    "description": "Demonstrates the use of a custom directive in Vue 3."
  },
  {
    "type": "function",
    "label": "Custom Method",
    "code": "function handleSubmit() {\n  outputMessage.value = `Hello, ${userInput.value}!`;\n}",
    "description": "Defines a custom method to handle business logic."
  },
  {
    "type": "router",
    "label": "Vue Router Navigation",
    "code": "import { useRouter } from 'vue-router';\n\nconst router = useRouter();\n\nfunction navigate() {\n  router.push('/next-page');\n}",
    "description": "Provides navigation capabilities using Vue Router."
  },
  {
    "type": "axios",
    "label": "API Call with Axios",
    "code": "import axios from 'axios';\n\nfunction fetchData() {\n  axios.get('/api/data').then(response => {\n    console.log(response.data);\n  });\n}",
    "description": "Demonstrates how to fetch data from an API using Axios."
  },
  {
    "type": "error",
    "label": "Error Handling",
    "code": "try {\n  // Some logic\n} catch (error) {\n  console.error('An error occurred:', error);\n}",
    "description": "Adds error handling to ensure robust code execution."
  },
  {
    "type": "transition",
    "label": "Add Transition",
    "code": "<transition name=\"fade\">\n  <div v-if=\"isVisible\">Content</div>\n</transition>",
    "description": "Applies a smooth transition to elements in the template."
  },
  {
    "type": "provideInject",
    "label": "Provide and Inject",
    "code": "// Provider\nprovide('key', value);\n\n// Injector\nconst injectedValue = inject('key');",
    "description": "Demonstrates dependency injection between parent and child components."
  }
]
